#!/usr/bin/env python3
import os
import time
import logging
from web3 import Web3
import requests
from dotenv import load_dotenv
import schedule

# Load configuration from .env
load_dotenv()

ETH_NODE = os.getenv('ETH_NODE_URL')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# List of Uniswap V2-like pair contract addresses to monitor\PAIR_ADDRESSES = [
    # –ü—Ä–∏–º–µ—Ä: '0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc',  # USDC-WETH
]

# –ü–æ—Ä–æ–≥ —Å–∂–∏–≥–∞–Ω–∏—è LP —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
THRESHOLD_PERCENT = float(os.getenv('THRESHOLD_PERCENT', 50.0))
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL_SECONDS', 60))

if not ETH_NODE or not BOT_TOKEN or not CHAT_ID:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã ETH_NODE_URL, TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –≤ .env")
    exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ethereum-–Ω–æ–¥–µ
w3 = Web3(Web3.HTTPProvider(ETH_NODE))
if not w3.isConnected():
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∑–ª—É Ethereum")
    exit(1)

# ABI –¥–ª—è —Å–æ–±—ã—Ç–∏–π Transfer –∏ —Ñ—É–Ω–∫—Ü–∏–∏ totalSupply
abi = [
    {
        "anonymous": False,
        "inputs": [
            {"indexed": True, "internalType": "address", "name": "from", "type": "address"},
            {"indexed": True, "internalType": "address", "name": "to", "type": "address"},
            {"indexed": False, "internalType": "uint256", "name": "value", "type": "uint256"}
        ],
        "name": "Transfer",
        "type": "event"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }
]

# –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è totalSupply
previous_supply = {}

def send_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {'chat_id': CHAT_ID, 'text': message}
    resp = requests.post(url, data=data)
    if resp.status_code != 200:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {resp.text}")


def monitor_pair(pair_address):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä—É –Ω–∞ —Å–∂–∏–≥–∞–Ω–∏–µ LP —Ç–æ–∫–µ–Ω–æ–≤."""
    contract = w3.eth.contract(address=Web3.toChecksumAddress(pair_address), abi=abi)
    current_supply = contract.functions.totalSupply().call()
    prev = previous_supply.get(pair_address, current_supply)
    if current_supply < prev:
        burned = prev - current_supply
        percent = burned / prev * 100
        if percent >= THRESHOLD_PERCENT:
            message = (
                f"üö® RugRadar Alert üö®\n"  
                f"–ü–∞—Ä–∞ {pair_address} —Å–æ–∂–≥–ª–∞ {burned} LP —Ç–æ–∫–µ–Ω–æ–≤ ({percent:.2f}% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞).\n"
                f"–ü–æ—Ä–æ–≥: {THRESHOLD_PERCENT}%"
            )
            send_telegram(message)
    previous_supply[pair_address] = current_supply


def monitor_all():
    logging.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    for pair in PAIR_ADDRESSES:
        try:
            monitor_pair(pair)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {pair}: {e}")


def main():
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(message)s')
    # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    monitor_all()
    # –ü–ª–∞–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL —Å–µ–∫—É–Ω–¥
    schedule.every(CHECK_INTERVAL).seconds.do(monitor_all)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main()
